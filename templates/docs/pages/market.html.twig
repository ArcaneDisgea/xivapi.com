{% extends "docs/index.html.twig"  %}
{% import "docs/macros.html.twig" as docs %}
{% set section = 14 %}

{% block doc %}

    <h1>Market</h1>

    <p>
        Get in-game market board information for any server, at any time.
        Market data is tracked and updated behind the scenes and stored in ElasticSearch. This provides you
        with fast access to all Market Data on any server. Items update based on their sale frequency across
        all servers. The faster an item sells, the faster it updates. In addition usage on MogBoard v2 will
        also increase the update frequency.
    </p>

    <h6>Notice of usage</h6>

    <p class="note">
        <strong>Mass Data Consideration</strong>
        <br>
        If you are interested in grabbing a lot of data, please consider what impact this may have on the service
        if you begin spamming it with requests. It is important that you know what you're doing and that
        you can work to the service. An abnormal amount of requests will very likely cause your key to be suspended.
        It may be enticing to think that because you have an API Key and can do lots of requests, that you should
        keep spamming the API. If you do this you are very likely to get banned, consider that item prices do
        not change that often (10-15 minutes minimum). If you need any help, jump into the discord.

        <br><br>

        <strong>Some servers are not supported</strong>
        <br>
        Due to world congestion, some servers are not on the API at this time. Please view the full supported servers at the bottom.
    </p>

    <hr>

    {# Item on Server #}
    {{ docs.api('/market/[server]/item/[item_id]', '/market/Phoenix/item/3', 'market') }}
    <p>
        Obtain the <strong>prices &amp; history</strong> for an item on a specific server.
    </p>

    <table class="param-table">
        <thead>
        <tr>
            <th width="25%">Param</th>
            <th width="75%">Description</th>
        </tr>
        </thead>
        <tbody>
            <tr>
                <td>max_history</td>
                <td>Limit the number of history results returned.</td>
            </tr>
        </tbody>
    </table>

    <h4>Response</h4>
    {% include 'docs/pages/code/market_response1.html.twig' %}

    <br><br>

    {# Item on any server or dc #}
    {{ docs.api('/market/item/[item_id]?servers=[x,y,z]', '/market/item/3?servers=Phoenix,Lich,Moogle', 'multi') }}
    <p>
        Obtain the <strong>prices &amp; history</strong> for an item on multiple servers or an entire Data-Center.
        The maximum number of servers is 15.
    </p>

    <table class="param-table">
        <thead>
        <tr>
            <th width="25%">Param</th>
            <th width="75%">Description</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>servers</td>
            <td>A comma seperated listed of servers.</td>
        </tr>
        <tr>
            <td>dc</td>
            <td>A Data-Center name, all servers in that DC will be returned, eg: <code>?dc=Chaos</code>.</td>
        </tr>
        <tr>
            <td>max_history</td>
            <td>Limit the number of history results returned.</td>
        </tr>
        </tbody>
    </table>

    <h4>Response</h4>
    <p>
        The response for this query is the same as querying a single server except the root is an object of server names
        with each entry being a single query, eg:
    </p>
    {% include 'docs/pages/code/market_response2.html.twig' %}

    <br><br>

    {# Multiple items on any server or dc #}
    {{ docs.api('/market/items?servers=[x,y,z]&ids=2,3,4', '/market/items?servers=Phoenix,Lich,Moogle&ids=2,3,4', 'ids') }}
    <p>
        Obtain the <strong>prices &amp; history</strong> for multiple items on multiple servers or an entire Data-Center.
        The maximum number of items is 100.
    </p>
    <p>
        This query works exactly the same as querying multiple servers however it is an array for each item, eg:
    </p>
    {% include 'docs/pages/code/market_response3.html.twig' %}

    <br><br>

    {# Sellable #}
    {{ docs.api('/market/ids', '/market/ids', 'ids') }}
    <p>
        Returns every item ID that is sellable in the Market Board.
    </p>

    <br><br>

    {# Categories #}
    {{ docs.api('/market/categories', '/market/categories', 'categories') }}
    <p>
        Get a list of market Search Categories.
    </p>

    <br><br>

    {# Search #}
    {{ docs.api('/market/search', '/market/search', 'search') }}
    <p class="note">
        Search will be coming to the market API after infrastructure has stabilised.
        The endpoint will accept full ElasticSearch Queries.
    </p>

    <br><br>

    {# Sellable Items #}
    {{ docs.api('/search?indexes=item&filters=ItemSearchCategory.ID>=9', '/search?indexes=item&filters=ItemSearchCategory.ID>=9', 'sellable-items') }}
    <h4>List of sellable items</h4>
    <p>
        We can use the Search endpoint to get a list of sellable items. The field <code>ItemSearchCategory</code>
        on an <code>Item</code> states what category it is in on the market board. All items will have an ID above
        or equal to <code>9</code>. The ID's below these are top level categories (Weapons, Armor, medicine, Misc, etc)
    </p>
    <p>
        You can combine the search API with custom queries and filters, along with the market endpoint to build some
        very powerful interfaces!
    </p>

    <hr>

    <h1 id="status">Server Status</h1>

    <p>
        At this time the following servers are not supported due to world congestion:
        <code>{{ server_unsupported|join(', ', ' and ') }}</code> - Server Offline are likely
        due to login issues and will be re-attempted every hour.
    </p>

    <table class="param-table">
        <thead>
        <tr>
            <th width="40%">Server</th>
            <th>Status</th>
            <th>Last Checked</th>
        </tr>
        </thead>
        <tbody>
        {% for token in server_tokens %}
            <tr>
                <td>{{ token.server }}</td>
                <td>{{ token.online ? 'Market Online' : '‼️ OFFLINE' }}</td>
                <td>{{ token.lastOnline|date }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

{% endblock %}
