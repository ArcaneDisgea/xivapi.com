<html>
    <head>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
        <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
        <style>
            body {
                padding: 10px;
            }
            .sidebar {
                max-width: 280px;
            }
            .map {
                width: 1024px;
                height: 1024px;
                background-color: #aaa;
                border-radius: 10px;
                overflow: hidden;
                position: relative;
            }
            .map-image {
                width: 1024px;
                height: 1024px;
                position: absolute;
                top: 0;
                left: 0;
            }
            .map-image img {
                width: 1024px;
                height: 1024px;
            }
            .map-trail {
                width: 1024px;
                height: 1024px;
                position: absolute;
                z-index: 3;
                top: 0;
                left: 0;
            }
            .map-trail span {
                display: inline-block;
                position: absolute;
                transform: translate(-50%, -50%);
                width: 4px;
                height: 4px;
                border-radius: 10px;
                background-color: #ff4452;
            }
            .map-markers {
                width: 1024px;
                height: 1024px;
                position: absolute;
                z-index: 5;
                top: 0;
                left: 0;
            }
            .map-player {
                width: 1024px;
                height: 1024px;
                position: relative;
                z-index: 10;
                top: 0;
                left: 0;
            }
            .map-player span {
                display: inline-block;
                position: absolute;
                transform: translate(-50%, -50%);
                width: 31px;
                height: 31px;
                top: 50%;
                left: 50%;
            }
            .map-player img {
                width: 31px;
                height: 31px;
                display: inline-block;
            }
            .map-info {
                margin-bottom: 10px;
            }
        </style>
    </head>
    <body>

    <div class="container-fluid">
        <div class="map-info">
            Name: <strong id="name">-</strong> |
            Map: <strong id="mapinfo">-</strong> |
            Position: <strong id="position">-</strong> |
            Trail Count: <strong id="trailcount">-</strong>
        </div>

        <div class="map">
            <div class="map-image"></div>
            <div class="map-markers"></div>
            <div class="map-trail"></div>
            <div class="map-player">
                <span><img src="/mappy/player.png"></span>
            </div>
        </div>
    </div>

    <script>
        let $map = $('.map');
        let $info = $('.map-info');
        let websocket = new WebSocket('wss://xivapi.local/socket');

        // current map info
        let map = null;
        let mapLayerCount = 0;
        let mapTrail = {};
        let mapTrailCount = 0;

        websocket.onopen = function(event) {
            console.log("Connection established!");
        };

        websocket.onmessage = function(event) {
            let command = event.data.split('::');
            let action  = command[0];
            let data    = command[1];

            switch(action) {
                default:
                    console.log("Unknown action: " + action);
                    break;

                case 'PLAYER_NAME':
                    setPlayerName(data);
                    break;

                case 'PLAYER_MAP_ID':
                    setPlayerMap(data);
                    break;

                case 'PLAYER_POSITION':
                    setPlayerPosition(data);
                    break;
            }
        };

        function setPlayerName(name) {
            $info.find('#name').html(name);
        }

        function setPlayerMap(mapId) {
            console.log('Getting map info from XIVAPI for map id: '+ mapId);

            // reset map
            resetMapEntries();

            // query xivapi
            $.ajax({
                url: 'https://xivapi.com/map/' + mapId,
                success: response => {
                    map = response;

                    let placename  = map.PlaceName.Name;
                    let regionname = map.PlaceNameRegion.Name;
                    let mapimage   = 'https://xivapi.com' + map.MapFilename;

                    // todo set layer count
                    // map.LayerCount = map.PlaceName.GameContentLinks.Map.PlaceName.Count
                    map.SizeFactor = parseFloat(map.SizeFactor / 100.0);

                    // set map information
                    $info.find('#mapinfo').html(mapId + ' ' + placename + ' ('+ regionname +')');

                    // set map image
                    $map.find('.map-image').html('<img src="'+ mapimage +'">');

                    // reset map
                    resetMapEntries();
                },
                error: response => {
                    console.log(response.responseJSON);
                }
            });
        }

        function setPlayerPosition(data) {
            if (map === null) {
                return;
            }

            let pos         = data.split(',');
            let posX        = pos[0];
            let posY        = pos[1];
            let posZ        = pos[2];
            let direction   = pos[3];

            let playerX     = ConvertCoordinatesIntoMapPosition(map.SizeFactor, map.OffsetX, posX);
            let playerY     = ConvertCoordinatesIntoMapPosition(map.SizeFactor, map.OffsetY, posY);

            $info.find('#position').html(playerX.toFixed(2) +' / '+ playerY.toFixed(2));

            let pixelX  = ConvertMapPositionToPixels(playerX, map.SizeFactor) / 2;
            let pixelY  = ConvertMapPositionToPixels(playerY, map.SizeFactor) / 2;

            $map.find('.map-player span').css({
                left: pixelX + 'px',
                top:  pixelY + 'px'
            });

            $map.find('.map-player img').css({
                transform: 'rotate('+ direction +'deg)'
            });

            //
            // Trail
            //
            let mapTrailkey = playerX.toFixed(1) + '_' + playerY.toFixed(1);
            if (typeof mapTrail[mapTrailkey] === 'undefined') {
                mapTrail[mapTrailkey] = 1;
                mapTrailCount++;

                $map.find('.map-trail')
                    .append('<span style="left:'+ pixelX + 'px;top:'+ pixelY +'px;"></span>');

                $info.find('#trailcount').html(mapTrailCount);
            }
        }

        function resetMapEntries() {
            $map.find('.map-trail').html('');
            $map.find('.map-markers').html('');
        }

        /**
         * Converts an in-game coordinate to a in-game position (what you see under mini-map)
         * @return {float}
         */
        function ConvertCoordinatesIntoMapPosition(scale, offset, value) {
            value  = Math.round(value, 3);
            value  = (value + offset) * scale;
            return ((41.0 / scale) * ((value + 1024.0) / 2048.0)) + 1;
        }

        /**
         * Converts an in-game position (what you see under mini-map) to a pixel position
         * @return {float}
         */
        function ConvertMapPositionToPixels(value, scale) {
            return ((value - 1) * 50 * scale);
        }

    </script>

    </body>
</html>
